import os
import io
import requests
import numpy as np
import matplotlib.pyplot as plt

from bs4 import BeautifulSoup
from astropy.table import Table
from astropy.io import fits

# Base URL for the GRB catalog page
base_url = "https://swift.gsfc.nasa.gov/results/batgrbcat/"

grbdpi_folder = "GRBdpi"       #dpi data, what im feeding to svm
#os.makedirs(grbdpi_folder, exist_ok=True)
    
max_dpis = 300
saved_dpis = 0

def get_grb_list():
    response = requests.get(base_url)  # Fetch the webpage
    if response.status_code == 200:  # make sure url opens/works
        soup = BeautifulSoup(response.text, 'html.parser')  # make wedsite readable to computer
        table = soup.find('table')  # find the main data table
        if not table:
            print("No GRB table found.")
            return []
        #print(table)  GOOD

    grbs = []  # List to store GRB names and trigger IDs
    for row in table.find_all('tr'):  # Iterate through table rows
        cols = row.find_all('td')  # Get all table columns (cells)
        if len(cols) > 2:  # Ensure the row contains enough data
            grb_name = cols[0].text.strip()  # 1st col is name
            trigger_id = cols[1].text.strip()  # 2nd col is trigger id
            if grb_name and trigger_id.isdigit():  # Ensure valid data
                grbs.append((grb_name, trigger_id))  # Store in list
    
    return grbs
    #print(grbs) done in main, name and triggerID, GOOD


# function that processes each event file in the folder
def process_dpis(event_table, index):
    global saved_dpis    #just accesses saved ones

    if saved_dpis >= max_dpis:
        print(f"Reached {max_dpis} GRB dpis.")
        return
    
    if 'DETX' in event_table.columns and 'DETY' in event_table.columns:
        if event_table['DETX'].size == 0 or event_table['DETY'].size == 0:
            print(f"Warning: 'DETX' or 'DETY' columns are empty for GRB {index}")
            return
        
        # Define the bin edges for the histogram
        xbins = np.arange(286 + 1) - 0.5
        ybins = np.arange(173 + 1) - 0.5

        # dpi for scatter
        #dpi, _, _ = np.histogram2d(event_table['DETX'], event_table['DETY'], bins=[xbins, ybins])
        
        # dpi for histogram
        dpi = plt.hist2d(event_table['DETX'], event_table['DETY'], bins=[xbins,ybins], vmin=0, vmax=2)[0]
        plt.close()                                                                        #should be max=60  ^^
        # for printing hists
        #print(f"\nProcessing DPI for GRB {index}:")
        #print(f"DPI Shape: {dpi.shape}")  # ✅ Should print (286, 173)
        #print(f"DPI Data Sample:\n{dpi}")  # ✅ Prints some values for verification
        #print(event_table[['DETX', 'DETY']][:10])  # first 10 rows
        
        #scatter below
        #y_idxs, x_idxs = np.nonzero(dpi)  # indices of nonzero bins for scatter
        #plt.figure(figsize=(6, 4))
        #plt.scatter(x_idxs, y_idxs, c=dpi[y_idxs, x_idxs], cmap='plasma', marker='s', s=10)
        #plt.colorbar(label="Counts per bin")
        #plt.xlabel('DETX')
        #plt.ylabel('DETY')
        #plt.grid(True, linestyle="--", alpha=0.5)
        #plt.title(f"Scatter Plot of Events for GRB {index}")
        
        #plt.colorbar(label='counts')
        #plt.grid(True)
        #plt.xlabel('DETX')
        #plt.ylabel('DETY')
        #plt.show()
        
        dpi_path = os.path.join(grbdpi_folder, f"GRBdpi_{saved_dpis + 1}.npy")
        if os.path.exists(dpi_path):  # Skip if exists
            print(f"Skipping {dpi_path} because it already exists.")
            saved_dpis += 1
            return
        np.save(dpi_path, dpi)
        print(f"Saved {dpi_path}")
            
        saved_dpis += 1
    else:
        print(f"Warning: 'DETX' or 'DETY' columns not found for GRB {index}")

        
def process_grb(grb_name, trigger_id, index): 
    global saved_dpis
    event_url = f"{base_url}{grb_name}/data_product/0{trigger_id}000/bat/event/sw0{trigger_id}000bevshsp_uf.evt"

    #print(f"\nEvent URL for GRB {grb_name} (index {index}): {event_url}")
    # getting event url   GOOD
    
    #check grb name earlier and still increment
    dpi_path = os.path.join(grbdpi_folder, f"GRBdpi_{index}.npy")

    if os.path.exists(dpi_path):
        print(f"Skipping GRB {grb_name} (dpi {saved_dpis + 1}) because the DPI file already exists.")
        saved_dpis += 1
        return
    

    try:
        response = requests.get(event_url)
        response.raise_for_status()
    
        #open directly from response memory
        with fits.open(io.BytesIO(response.content)) as hdul:
            trig_time = hdul[1].header['TRIGTIME']
            event_table = Table(hdul[1].data)
            
            event_table = event_table[(event_table['TIME'] >= trig_time) & 
                                      (event_table['TIME'] <= trig_time + 0.064)]
            print(f"Number of events in 64ms window: {len(event_table)}")            # events in 64ms

            
            #event_table = Table(hdul[1].data)
            process_dpis(event_table, index)
    except Exception as e:
        print(f"Skipping {grb_name}: {e}")  # print error

        
def main():
    global saved_dpis
    grbs = get_grb_list()  # Get list of GRB entries
    for i, (name, tid) in enumerate(grbs, start=1):  # Iterate through GRBs
        if saved_dpis >= max_dpis:          # i want successful 24 saves
            break

        print(f"\tProcessing GRB {name} (index {i})...")  
        process_grb(name, tid, i)  # Process each GRB entry
    #print(grbs)    
    print(f"Processing complete. {saved_dpis} GRB dpi files saved.")


# Run the script when executed
if __name__ == "__main__":
    main()
